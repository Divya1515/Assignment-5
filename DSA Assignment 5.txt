1.write a c program to reverse a string using stack?

#include <stdio.h>  
#include <string.h>  
#define max 100  
int top,stack[max];  
void push(char x){  
  
      // Push(Inserting Element in stack) operation  
      if(top == max-1){  
          printf("stack overflow");  
      }  else {  
          stack[++top]=x;  
      }   
}   
void pop(){  
    // Pop (Removing element from stack)  
      printf("%c",stack[top--]);  
}    
main()  
{  
   char str[]="divya";  
   int len = strlen(str);  
   int i;  
  
   for(i=0;i<len;i++)  
        push(str[i]);  
  
   for(i=0;i<len;i++)  
      pop();  
} 
Out put: ayvid

2.write a program for Infix To Postfix Conversion Using Stack.

#include<stdio.h>
#include <ctype.h>
#define SIZE 50            
char stack[SIZE];
int top=-1;      
push(char elem)
{                       /* Function for PUSH operation */
    stack[++top]=elem;
}
char pop()
{                      /* Function for POP operation */
    return(stack[top--]);
}
int pr(char symbol)
{                 /* Function for precedence */
    
	if(symbol == '^')
	{
		return(3);
	}
	else if(symbol == '*' || symbol == '/')
	{
		return(2);
	}
	else if(symbol == '+' || symbol == '-')        
	{
		return(1);
	}
	else
	{
		return(0);
	}
}
int main()
{                        
    char infix[50],postfix[50],ch,elem;
    int i=0,k=0;
    printf("Enter Infix Expression : ");
    scanf("%s",infix);
    push('#');
    while( (ch=infix[i++]) != '\0')
    {
        if( ch == '(') push(ch);
        else
            if(isalnum(ch)) postfix[k++]=ch;
            else
                if( ch == ')')
                {
                    while( stack[top] != '(')
                        postfix[k++]=pop();
                    elem=pop(); /* Remove ( */
                }
                else
                {       
                    while( pr(stack[top]) >= pr(ch) )
                        postfix[k++]=pop();
                    push(ch);
                }
    }
    while( stack[top] != '#')     /* Pop from stack till empty */
        postfix[k++]=pop();
    postfix[k]='\0';          
    printf("\nPostfix Expression =  %s\n",postfix);
}
Out put:
Enter Infix Expression : a+(b*c-(d/e-f)*g)*h
Postfix Expression =  abc*de/f-g*-h*+


3.write a C Program to Implement Queue Using Two Stacks

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
struct Stack {
    int data;
    struct Stack *next;
};
struct Stack *CreateStack () {
    return NULL;
}
int isEmptyStack(struct Stack *top) {
    return (top == NULL);
}
void Push(struct Stack **top, int data) {
    struct Stack *newNode = (struct Stack*) malloc(sizeof(struct Stack));
    if(!newNode)
        return;
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}
int Pop(struct Stack **top) {
    struct Stack *temp;
    int data;
    if(isEmptyStack(*top)) {
        printf("Empty Stack.\n");
        return INT_MIN;
    }
    temp = *top;
    data = (*top)->data;
    *top = (*top)->next;
    free(temp);
    return data;
}
struct Queue {
    struct Stack *S1;
    struct Stack *S2;
};
struct Queue *CreateQueue() {
    struct  Queue  *newNode = (struct Queue *) malloc(sizeof(struct  Queue ));
    return newNode;
}
void EnQueue(struct Queue *Q, int data) {
    Push(&Q->S1, data);
}
int DeQueue(struct Queue *Q) {
    if(!isEmptyStack(Q->S2)) {
        return Pop(&Q->S2);
    }
    else {
        while(!isEmptyStack(Q->S1)) {
            Push(&Q->S2, Pop(&Q->S1));
        }
        return Pop(&Q->S2);
    }
}

int main() {
    struct Queue *Q = CreateQueue();
    Q->S1 = Q->S2 = NULL;
    EnQueue(Q, 14);
    EnQueue(Q, 25);
    EnQueue(Q, 32);

    printf("%d ", DeQueue(Q));
    printf("%d ", DeQueue(Q));
    printf("%d ", DeQueue(Q));
    return 0;
}
Output:
14 25 32


4.write a c program for insertion and deletion of BST.

#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 
    int key; 

    struct node *left, *right; 
}; 

  
// A utility function to create a new BST node 

struct node *newNode(int item) 
{ 

    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->key = item; 
    temp->left = temp->right = NULL; 
    return temp; 
}   
// A utility function to do inorder traversal of BST 
void inorder(struct node *root) 
{ 
    if (root != NULL) 

    { 
        inorder(root->left); 
        printf("%d ", root->key); 
        inorder(root->right); 
    } 
} 

  
/* A utility function to insert a new node with given key in BST */

struct node* insert(struct node* node, int key) 
{ 

    /* If the tree is empty, return a new node */

    if (node == NULL) return newNode(key); 

    /* Otherwise, recur down the tree */

    if (key < node->key) 

        node->left  = insert(node->left, key); 

    else

        node->right = insert(node->right, key);   

    /* return the (unchanged) node pointer */

    return node; 
} 

  
/* Given a non-empty binary search tree, return the node with minimum 

   key value found in that tree. Note that the entire tree does not 

   need to be searched. */

struct node * minValueNode(struct node* node) 
{ 

    struct node* current = node; 

  

    /* loop down to find the leftmost leaf */

    while (current && current->left != NULL) 

        current = current->left; 
    return current; 
} 
  
/* Given a binary search tree and a key, this function deletes the key 

   and returns the new root */

struct node* deleteNode(struct node* root, int key) 
{ 

    // base case 

    if (root == NULL) return root; 
    // If the key to be deleted is smaller than the root's key, 

    // then it lies in left subtree 

    if (key < root->key) 

        root->left = deleteNode(root->left, key); 
    // If the key to be deleted is greater than the root's key, 

    // then it lies in right subtree 

    else if (key > root->key) 

        root->right = deleteNode(root->right, key); 
    // if key is same as root's key, then This is the node 

    // to be deleted 

    else

    { 

        // node with only one child or no child 

        if (root->left == NULL) 

        { 

            struct node *temp = root->right; 

            free(root); 

            return temp; 

        } 

        else if (root->right == NULL) 

        { 

            struct node *temp = root->left; 

            free(root); 

            return temp; 

        } 

  

        // node with two children: Get the inorder successor (smallest 

        // in the right subtree) 

        struct node* temp = minValueNode(root->right); 

  
        // Copy the inorder successor's content to this node 
        root->key = temp->key; 
        // Delete the inorder successor 

        root->right = deleteNode(root->right, temp->key); 
    } 
    return root; 
}  
// Driver Program to test above functions 

int main() 
{ 

    struct node *root = NULL; 

    root = insert(root, 155); 

    root = insert(root, 130); 

    root = insert(root, 120); 

    root = insert(root, 140); 

    root = insert(root, 175); 

    root = insert(root, 160); 

    root = insert(root, 80); 
    printf("Inorder traversal of the given tree \n"); 
    inorder(root); 
    printf("\nDelete 120\n"); 

    root = deleteNode(root, 120); 

    printf("Inorder traversal of the modified tree \n"); 
    inorder(root);   
    printf("\nDelete 130\n"); 
    root = deleteNode(root, 130); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
    printf("\nDelete 155\n"); 
    root = deleteNode(root, 155); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
    return 0; 
}
Output:
Inorder traversal of the given tree                                                                                                             
80 120 130 140 155 160 175                                                                                                                      
Delete 120                                                                                                                                      
Inorder traversal of the modified tree                                                                                                          
80 130 140 155 160 175                                                                                                                          
Delete 130                                                                                                                                      
Inorder traversal of the modified tree                                                                                                          
80 140 155 160 175                                                                                                                              
Delete 155                                                                                                                                      
Inorder traversal of the modified tree                                                                                                          
80 140 160 175    